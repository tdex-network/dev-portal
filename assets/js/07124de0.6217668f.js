"use strict";(self.webpackChunkdev_portal=self.webpackChunkdev_portal||[]).push([[1146],{5680:(e,t,r)=>{r.d(t,{xA:()=>d,yg:()=>m});var n=r(6540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=l(r),y=a,m=c["".concat(p,".").concat(y)]||c[y]||u[y]||o;return r?n.createElement(m,s(s({ref:t},d),{},{components:r})):n.createElement(m,s({ref:t},d))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=y;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},7204:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=r(8168),a=(r(6540),r(5680));const o={title:"Trade",sidebar_position:3},s=void 0,i={unversionedId:"trader/SDK/Javascript/trade",id:"version-0.9.1/trader/SDK/Javascript/trade",title:"Trade",description:"Trade against a Liquidity provider in the TDEX network. This fully implements BOTD#4",source:"@site/versioned_docs/version-0.9.1/trader/SDK/Javascript/trade.md",sourceDirName:"trader/SDK/Javascript",slug:"/trader/SDK/Javascript/trade",permalink:"/docs/v0/trader/SDK/Javascript/trade",draft:!1,editUrl:"https://github.com/tdex-network/dev-portal/edit/master/versioned_docs/version-0.9.1/trader/SDK/Javascript/trade.md",tags:[],version:"0.9.1",sidebarPosition:3,frontMatter:{title:"Trade",sidebar_position:3},sidebar:"version-0.9.1/tutorialSidebar",previous:{title:"Identity",permalink:"/docs/v0/trader/SDK/Javascript/Identity"},next:{title:"Swap",permalink:"/docs/v0/trader/SDK/Javascript/swap"}},p={},l=[{value:"Market",id:"market",level:3},{value:"Sell L-BTC",id:"sell-l-btc",level:3},{value:"Buy L-BTC",id:"buy-l-btc",level:3},{value:"Preview",id:"preview",level:3}],d={toc:l},c="wrapper";function u(e){let{components:t,...r}=e;return(0,a.yg)(c,(0,n.A)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"Trade against a Liquidity provider in the TDEX network. This fully implements ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/tdex-network/tdex-specs/blob/master/04-trade-protocol.md"},(0,a.yg)("strong",{parentName:"a"},"BOTD#4"))),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"Trade")," object provides the API using to interact with TDex daemons. The constructor takes a configuration object with the following options:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"providerUrl"),": the TDex daemon endpoint, hosted by a Liquidity provider."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"explorerUrl"),": the Esplora endpoint using to get blockchain data."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"utxos"),": the trader's unspents. You can ",(0,a.yg)("a",{parentName:"li",href:"#fetch-and-unblind-utxos"},"fetch them")," with LDK."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"coinSelector"),": specify the strategy used to select utxos during transaction creation.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'const trade = new Trade({\n  providerUrl: "provider.tdex.network:9945",\n  explorerUrl: "https://blockstream.info/liquid/api",\n  utxos: traderUtxos, // an array of UtxoInterface\n  coinSelector: greedyCoinSelector(), // this is exported by tdex-sdk\n});\n')),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},(0,a.yg)("inlineCode",{parentName:"p"},"utxos")," are ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/vulpemventures/ldk/blob/master/src/types.ts#L33"},"JS objects")," wrapping utxo's data. They can be fetched without LDK. However, they ",(0,a.yg)("strong",{parentName:"p"},"must")," be unblinded in case of ",(0,a.yg)("a",{parentName:"p",href:"https://elementsproject.org/features/confidential-transactions"},"confidential outputs"),".")),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("h3",{parentName:"admonition",id:"tor-proxy-for-web-clients"},"TOR proxy for web clients"),(0,a.yg)("p",{parentName:"admonition"},"Natively, web browsers do not support TOR protocol. That's why we are using a ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/tdex-network/tor-proxy"},"tor-proxy")," to redirect requests to onion endpoints. By default, clients use ",(0,a.yg)("inlineCode",{parentName:"p"},"https://proxy.tdex.network")," as proxy. If you want to use your own, you must specify your proxy endpoint in ",(0,a.yg)("inlineCode",{parentName:"p"},"Trade")," constructor."),(0,a.yg)("p",{parentName:"admonition"},"Example with a custom proxy hosted at ",(0,a.yg)("em",{parentName:"p"},(0,a.yg)("a",{parentName:"em",href:"https://my.custom.tor-proxy.endpoint"},"https://my.custom.tor-proxy.endpoint")),"."),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'const trade = new Trade(tradeOpts, "https://my.custom.tor-proxy.endpoint");\n')),(0,a.yg)("blockquote",{parentName:"admonition"},(0,a.yg)("p",{parentName:"blockquote"},(0,a.yg)("inlineCode",{parentName:"p"},"tradeOpts.providerUrl")," should be an onion endpoint here."))),(0,a.yg)("h3",{id:"market"},"Market"),(0,a.yg)("p",null,"We'll trade on LBTC<->USDT market. ",(0,a.yg)("inlineCode",{parentName:"p"},"MarketInterface")," describes the market with asset hashes."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'const market = {\n  baseAsset: "6f0279e9ed041c3d710a9f57d0c02928416460c4b722ae3457a11eec381c526d", // L-BTC\n  quoteAsset:\n    "c5870288a7c9eb5db398a5b5e7221feb9753134439e8ed9f569b0eea5a423330", // USDT\n};\n')),(0,a.yg)("h3",{id:"sell-l-btc"},"Sell L-BTC"),(0,a.yg)("p",null,"Then, using the ",(0,a.yg)("inlineCode",{parentName:"p"},"Trade")," instance, we are able to sell 10 000 sats of L-BTC. At this step, you need an ",(0,a.yg)("a",{parentName:"p",href:"#identity"},"IdentityInterface")," in order to sign the PSET."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"// sell ALWAYS send baseAsset and receive quoteAsset\n// `trade` will select the baseAsset unspents.\nconst tradeTxID = await trade.sell({\n  market, // our MarketInterface object\n  amount: 100000, // expressed in satoshis\n  asset: market.baseAsset,\n  identity: identityInterface,\n});\n")),(0,a.yg)("h3",{id:"buy-l-btc"},"Buy L-BTC"),(0,a.yg)("p",null,"Contrary to ",(0,a.yg)("inlineCode",{parentName:"p"},"trade.sell"),", the ",(0,a.yg)("inlineCode",{parentName:"p"},"trade.buy")," function lets to buy the baseAsset (L-BTC here)."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"// sell ALWAYS send quoteAsset and receive baseAsset\n// `trade` will select the quoteAsset unspents.\nconst tradeTxID = await trade.buy({\n  market, // our MarketInterface object\n  amount: 100000, // expressed in satoshis\n  asset: market.baseAsset,\n  identity: identityInterface,\n});\n")),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"asset")," parameter is using to specify the amount of base or quote asset in a trade. Thus, if u want to sell the ",(0,a.yg)("strong",{parentName:"p"},"base asset")," in order to receive a certain amount of ",(0,a.yg)("strong",{parentName:"p"},"quote asset"),", you can specify it in ",(0,a.yg)("inlineCode",{parentName:"p"},"sell()")," parameter object."),(0,a.yg)("pre",{parentName:"blockquote"},(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"// sell baseAsset and receive quoteAsset\nconst tradeTxID = await trade.sell({\n  market,\n  amount: 50000,\n  asset: market.quoteAsset, // receive 50000 sats of *quoteAsset* but still send *baseAsset*!\n  identity: identityInterface,\n});\n"))),(0,a.yg)("h3",{id:"preview"},"Preview"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"trade.preview")," method can be used to compute market's prices."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"const {\n  assetToBeSent\n  amountToBeSent // amount of baseAsset satoshis to sell in order to receive 50000 quoteAsset\n  assetToReceive\n  amountToReceive\n} = await trade.preview({\n  market,\n  tradeType: TradeType.SELL,\n  amount: 50000,\n  asset: market.quoteAsset\n});\n")))}u.isMDXComponent=!0}}]);