"use strict";(self.webpackChunkdev_portal=self.webpackChunkdev_portal||[]).push([[5894],{6042:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"announcing-tdex-v2","metadata":{"permalink":"/blog/announcing-tdex-v2","editUrl":"https://github.com/tdex-network/dev-portal/edit/master/blog/blog/2023-08-04-announcing-tdex-v2.md","source":"@site/blog/2023-08-04-announcing-tdex-v2.md","title":"Announcing TDEX v2","description":"Today we are pleased to announce the new version of the TDEX protocol.","date":"2023-08-04T00:00:00.000Z","formattedDate":"August 4, 2023","tags":[{"label":"liquid","permalink":"/blog/tags/liquid"},{"label":"tdex","permalink":"/blog/tags/tdex"},{"label":"bitcoin","permalink":"/blog/tags/bitcoin"},{"label":"v2","permalink":"/blog/tags/v-2"}],"readingTime":3.625,"hasTruncateMarker":false,"authors":[{"name":"Pietralberto Mazza","title":"TDEX Contributor","imageURL":"https://avatars.githubusercontent.com/u/18440657"}],"frontMatter":{"slug":"announcing-tdex-v2","title":"Announcing TDEX v2","author":"Pietralberto Mazza","draft":false,"author_title":"TDEX Contributor","author_image_url":"https://avatars.githubusercontent.com/u/18440657","tags":["liquid","tdex","bitcoin","v2"]},"nextItem":{"title":"Liquid Bitcoin peg-in(s) in the browser!","permalink":"/blog/liquid-pegin-browser"}},"content":"Today we are pleased to announce the new version of the TDEX protocol.\\n\\nThe newest `v2` comes with updates to **BOTD#3** and **BOTD#4** that affect the way a trade is both presented and cooperatively crafted by a trader and a provider.\\n\\nWe have released a new major version of all our services in order to be compliant with TDEX v2.\\nThe newest version `v1.0.0` of the daemon contains very few changes at the interface level, but at the same time, under the hood, it has been completely refactored by drastically improving its performances.\\n\\nAnd the same stands for the official app! The new `v2.0.0` version of the app is a lot faster than the previous one and supports both versions of the TDEX protocol. You won\'t even notice if you\'re trading against a TDEX v1 or v2 provider!\\n\\n## What\'s changed?\\n\\nThe main change of the new protocol is the adoption of the new PSETv2 format (BIP-370) as a means to describe and (cooperatively) build the transactions.\\n\\nThis required inevitable breaking changes to [BOTD#3](/docs/latest/specs/swap-protocol), so we took the chance to make some little but impactful changes to [BOTD#4](/docs/latest/specs/trade-protocol)\\n\\nLet\'s see briefly how the services have changed.\\n\\n### Daemon\\n\\nThe service that has changed the most is unavoidably the daemon, which has undergone a huge process of redesigning and refactoring.\\n\\nThe biggest change of the new `v1.0.0` version is the detachment of the wallet. The daemon, in fact, now requires a connection to an _Ocean wallet_ that acts as the bag of keys for crafting/signing transactions, but also as the source of all blockchain-related events.  \\n\\nThe coolest thing about this is that you can plug your daemon not only with the official _Ocean wallet_ implementation but with any wallet that sticks with the _Ocean protos_ really. This opens the daemon up to a lot of new scenarios - for example, you could wrap up your preferred wallet\'s API and let it be used by the daemon! \\n\\nNow that the handling keys and watching the blockchain are not up to the daemon anymore, we have introduced a brand new feature that might turn out useful to you: you can set up price feeds for your markets!\\n\\nThis means that you can configure your provider to connect to some exchange (e.g. bitfinex) and feed your market with the prices retrieved from it asynchronously!\\n\\nThe providers come with the typical CLI - with a rethinked set of commands and flags - and a brand new service that takes care of migrating your daemon from the old `v0.9.x` the the new `v1.0.0`.\\n\\nTake a look at the [official documentation](/docs/latest/provider/intro) and follow the tutorial to learn everything you need to manage your provider.\\n\\nYou can see the list of all the new `v2/` APIs by looking directly at the [github repo](https://github.com/tdex-network/tdex-daemon/blob/master/api-spec/protobuf/tdex-daemon/v2).\\n\\n### Dashboard\\n\\nThe dashboard lets you set up your daemon by means of a user interface that might make you more comfortable compared to the CLI.\\n\\nThe main change that affects the new `v1.0.0` version of the dashboard is that it supports only daemons with version `v1.0.0` and won\'t be able to connect to older ones. You\'ll get notified with an error otherwise.\\n\\nIf you already used the dashboard, you won\'t see big changes on the user interface besides the higher number of options you have to customize your market.\\n\\n###\xa0App\\n\\nThe app allows users to trade their funds against the markets of the providers listed on the public registry.\\n\\nIt supports both TDEX v1 and TDEX v2 protocols in order to offer them the smoothest experience. You won\'t even notice if they\'re trading against a TDEX v1-compatible or a v2-compatible provider!\\n\\nWe didn\'t make any relevant changes to the user interface of the app, but you\'ll notice for sure the step forward in terms of performance!\\n\\nMuch faster, and much reliable, the app has been refactored in order to sharply reduce the time spent on watching the blockchain.\\n\\nSimilarly to the daemon, the app gets notified about blockchain events in an asynchronous way instead of polling a block explorer. This grants a higher level of personage that you can appreciate especially when restoring your wallet - the very first operation done by the app once you update and unlock it.\\n\\nGo to your app store and download the latest version of the app now to enjoy the new TDEX!"},{"id":"liquid-pegin-browser","metadata":{"permalink":"/blog/liquid-pegin-browser","editUrl":"https://github.com/tdex-network/dev-portal/edit/master/blog/blog/2021-09-20-liquid-pegin-browser.md","source":"@site/blog/2021-09-20-liquid-pegin-browser.md","title":"Liquid Bitcoin peg-in(s) in the browser!","description":"Any wallet developer can integrate trustless Liquid Bitcoin peg-in features in their own application, even in the browser!","date":"2021-09-20T00:00:00.000Z","formattedDate":"September 20, 2021","tags":[{"label":"pegin","permalink":"/blog/tags/pegin"},{"label":"liquid","permalink":"/blog/tags/liquid"},{"label":"tdex","permalink":"/blog/tags/tdex"},{"label":"bitcoin","permalink":"/blog/tags/bitcoin"}],"readingTime":1.715,"hasTruncateMarker":true,"authors":[{"name":"Marco Argentieri","title":"TDEX Contributor","imageURL":"https://avatars.githubusercontent.com/u/3596602"}],"frontMatter":{"slug":"liquid-pegin-browser","title":"Liquid Bitcoin peg-in(s) in the browser!","author":"Marco Argentieri","draft":false,"author_title":"TDEX Contributor","author_image_url":"https://avatars.githubusercontent.com/u/3596602","tags":["pegin","liquid","tdex","bitcoin"]},"prevItem":{"title":"Announcing TDEX v2","permalink":"/blog/announcing-tdex-v2"},"nextItem":{"title":"Deploy a TDEX Daemon to AWS with Terraform","permalink":"/blog/tdex-terraform-deploy-aws"}},"content":"Any wallet developer can integrate trustless Liquid Bitcoin peg-in features in their own application, even in the browser!\\n\\n\x3c!--truncate--\x3e\\n\\n```bash\\nnpm install --save pegin\\n# or with yarn\\nyarn add pegin\\n```\\n\\n\\nThen in your JavaScript or TypeScript project\\n\\n```ts\\n\\nimport ElementsPegin from \'pegin\';\\n\\n// initialize the module\\nconst peginModule = new ElementsPegin(\\n  await ElementsPegin.withGoElements(),\\n  await ElementsPegin.withLibwally(),\\n);\\n\\n// get a pegin address to deposit Bitcoin\\nconst peginAddress = await peginModule.getMainchainAddress(\\n  claimScript // Liquid scriptpubkey\\n);\\n\\n\\n// deposit funds to the Bitcoin address\\nconsole.log(peginAddress); \\n\\n// retrieve the raw bitcoin transaction hex encoded and the merkle block proof, pass them along the Liquid script used to generate the pegin address\\nlet claimTx = await peginModule.claimTx(\\n    btcTxHex,\\n    btcTxOutProof,\\n    claimScript\\n);\\n\\n// Now you can broadcast the transaction to the Liquid Network\\n```\\n\\n### What\'s a peg-in?\\n\\n[Liquid Network](https://liquid.net) allows anyone to \\"convert\\" BTC into L-BTC, the sidechain native asset, with a process called **peg-in**: it consists in sending Bitcoin to the Liquid federation multisignature script tweaked with the user\'s Liquid script. \\n\\nAfter 102 Bitcoin mainchain blocks, the user can **claim** his Liquid bitcoins creating a special Liquid transaction and broadcast it to the Liquid Network.\\n\\n\\n### How a user can peg-in?\\n\\nAt the moment the process is quite cumbersome and requires the user to use an Elements node via command line interface. This basically forced the majority of users to use centralized exchanges, involving a custodial process and counterparty risks.\\n\\n### Trustless peg-in in the browser\\n\\nTDEX allows anyone to trade Liquid assets freely without being custodian of funds and the major road block to increase TDEX and Liquid Network usage is to let people to get Liquid Bitcoin with their mainchain Bitcoin.\\n\\nBrowsers and mobile apps built with web technologies such as React Native or Cordova can now use the npm [pegin](https://www.npmjs.com/package/pegin) module and integrate this in few lines of code.\\n\\n### Try now!\\n\\nTry the pegin feature, now live in the TDEX mobile app!\\n\\n* Download iOS from [App Store](https://apps.apple.com/app/truedex-trading-unleashed/id1545948177)\\n* Download Android from [Play Store](https://play.google.com/store/apps/details?id=io.sevenlabs.app) or install the [APK from Github Releases](https://github.com/TDex-network/tdex-app/releases)"},{"id":"tdex-terraform-deploy-aws","metadata":{"permalink":"/blog/tdex-terraform-deploy-aws","editUrl":"https://github.com/tdex-network/dev-portal/edit/master/blog/blog/2021-09-15-tdex-terraform-deploy-aws.md","source":"@site/blog/2021-09-15-tdex-terraform-deploy-aws.md","title":"Deploy a TDEX Daemon to AWS with Terraform","description":"Configure and run the TDEX box easily using Terraform automation.","date":"2021-09-15T00:00:00.000Z","formattedDate":"September 15, 2021","tags":[{"label":"terraform","permalink":"/blog/tags/terraform"},{"label":"automation","permalink":"/blog/tags/automation"},{"label":"tdex","permalink":"/blog/tags/tdex"},{"label":"deploy","permalink":"/blog/tags/deploy"}],"readingTime":3.71,"hasTruncateMarker":true,"authors":[{"name":"Alexander K","title":"TDEX Contributor"}],"frontMatter":{"slug":"tdex-terraform-deploy-aws","title":"Deploy a TDEX Daemon to AWS with Terraform","author":"Alexander K","author_title":"TDEX Contributor","tags":["terraform","automation","tdex","deploy"]},"prevItem":{"title":"Liquid Bitcoin peg-in(s) in the browser!","permalink":"/blog/liquid-pegin-browser"}},"content":"Configure and run the TDEX box easily using Terraform automation. \\n\\n\x3c!--truncate--\x3e\\n\\n### Create a user and obtain AWS Keys\\n\\nAs a first step it is required to obtain AWS access and secret keys. Best practice is to create a new user in AWS IAM. \\nPlease navigate to Services > IAM page > Add user. \\nOpen the AWS IAM users page, and click on Add user. Provide user with name and select Programmatic access on the Access type section. \\n\\n![Add User](../static/img/add-user.png)\\n\\nNext, make sure that your AWS account (access key) has all the required privileges to create EC2 instances and S3 access.\\nPermissions you need: EC2 full, S3 full and VPC access.\\n\\n![Attach permissions](../static/img/attach-perms.png)\\n\\nOnce you add Permissions and Tags, click Create user. That will bring you to the latest page provided with AWS Access and Secret Keys. \\nCopy your keys to a safe place and do not share them with anyone.\\n\\n![Attach permissions](../static/img/user-keys.png)\\n\\nCheck the documentation [here](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html)\\n\\n- - - - - \\n### Install Terraform\\n\\nNext step is to install Terraform on your machine.\\nThe easiest way is to follow the official documentation [here](https://www.terraform.io/docs/cli/install/apt.html).\\nFor Debian and Ubuntu APT Packages, you can also follow this installation.\\n```bash\\n$ curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\\n$ sudo apt-add-repository \\"deb [arch=$(dpkg --print-architecture)] https://apt.releases.hashicorp.com $(lsb_release -cs) main\\"\\n$ sudo apt install terraform\\n```\\n- - - - - \\n### Proceed with cloning and deployment\\nClone the TDEX Box repository and enter its directory. \\n```bash\\ngit clone https://github.com/tdex-network/tdex-box.git\\ncd tdex-box\\n```\\n- - - - - \\n\\nOn the AWS AMI Marketplace, find Ubuntu 20.04 public AMI, accessible in the region you are planing to deploy the service and copy its AMI ID. \\n\\nOnce you have everything in place, just execute deploy.sh and it will prompt you for all the parameters in the same order provided above. \\nSince it is good practice to have a backup enabled, please provide S3 bucket a name when deploying. \\nPlease enter the parameters carefully. \\n\\n**Make sure you copy the IP address after the deployment is over.**\\nThis is your TDEX endpoint IP, and it can be accessed over port 9000.\\n```bash\\n$ cd terabox/\\n$ chmod +x deploy.sh\\n$ ./deploy.sh\\n```\\n![Deploy](../static/img/deploy.png)\\n\\n### Tor\\n\\nWhen executing deploy.sh, you can also setup your service behind Tor. \\nYou can provide your own V3 Onion private key, or simply leave it empty in order to have the service to generate it for you. \\n\\nConnect to your Linux box over SSH and get onion endpoint.\\n```bash\\n$ ssh -i ~/.ssh/key_location ubuntu@your.tdex.host.ip\\n$ docker exec tor onions\\n\\n```\\n\\nOnce you have your Onion endpoint, please follow [this](https://dev.tdex.network/docs/provider/registry) tutorial on how to register your onion endpoint in the [public TDEX registry ](https://github.com/TDex-network/tdex-registry)\\n\\n\\n\\n### Install and use TDEX-CLI on you local machine\\n\\nTDEX is a CLI (GRPC client), that can be used to interact with a remote TDEX-daemon endpoint. \\nWe need to init/configure tdex-cli, which is a way of authenticating to the remote running deamon. \\nWhen configuring the service, we need to provide several things:\\n - tls_cert_path\\n - macaroons_path\\n - rpcserver (this will be IP of machine where tdex-box is deployed)\\n\\nTo install TDEX CLI you need to run **getCli.sh** located in scripts folder. If installed successfully tdex-cli will print help menu.\\n\\n```bash\\n$ chmod +x terabox/scripts/getCli.sh\\n$ sudo ./terabox/scripts/getCli.sh\\n```\\n\\nOnce you have installed tdex-cli, you will need to download the TLS certificate and macaroons from your tdexd host machine in order to connect remotely. This command will download the whole tdexd/ folder which is a copy of your container deamon. \\n```bash\\n$  scp -r user@your.tdex.host.ip:$HOME/tdex-box/tdexd .\\n```\\n\\nConfigure the tdex-cli with downloaded macaroons and certificate, and add your remote endpoint IP. \\n - cert.pem is located at $HOME/tdex-box/tdexd/tls/cert.pem on the remote machine\\n - admin.macaroon is located at $HOME/tdex-box/tdexd/macaroons/admin.macaroon on the remote machine\\n```bash\\n# By default it looks for the daemon operator gRPC interface on localhost:9000\\n# or on a remote machine\\n$ tdex config init --rpcserver=tdex.remote.host.ip:9000 --tls_cert_path=./cert.pem --macaroons_path=./admin.macaroon\\n##### OR you can use the config command to set your values\\n$ tdex config\\n$ tdex config set tls_cert_path ./cert.pem\\n$ tdex config set macaroons_path ./admin.macaroon\\n$ tdex config set rpcserver tdex.remote.host.ip \\n\\n\\nAfter those are set, you can test the TDEX daemon\\n$ tdex listmarket\\n$ tdex help   <-- for more information and commands\\n```\\nFor more information [how to configure and use the TDEX CLI](https://dev.tdex.network/docs/provider/daemon/getting_started/configure_cli)\\n### Deposit funds\\n**Done!** Now you are ready to [deposit funds](https://dev.tdex.network/docs/provider/daemon/deposit_funds) to open a market and earn swap fees."}]}')}}]);