"use strict";(self.webpackChunkdev_portal=self.webpackChunkdev_portal||[]).push([[6699],{5555:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=t(8168),r=(t(6540),t(5680));const i={title:"BOTD#3: Swap"},o="Swap protocol",s={unversionedId:"specs/swap-protocol",id:"specs/swap-protocol",title:"BOTD#3: Swap",description:"Overview",source:"@site/docs/specs/03-swap-protocol.md",sourceDirName:"specs",slug:"/specs/swap-protocol",permalink:"/docs/latest/specs/swap-protocol",draft:!1,editUrl:"https://github.com/tdex-network/dev-portal/edit/master/docs/specs/03-swap-protocol.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"BOTD#3: Swap"},sidebar:"tutorialSidebar",previous:{title:"BOTD#2: Transport",permalink:"/docs/latest/specs/transport-protocol"},next:{title:"BOTD#4: Trade",permalink:"/docs/latest/specs/trade-protocol"}},p={},l=[{value:"Overview",id:"overview",level:2},{value:"Swap",id:"swap",level:2},{value:"Data Structures",id:"data-structures",level:3},{value:"SwapRequest",id:"swaprequest",level:3},{value:"SwapAccept",id:"swapaccept",level:3},{value:"SwapComplete",id:"swapcomplete",level:3},{value:"SwapFail",id:"swapfail",level:3}],c={toc:l},d="wrapper";function u(e){let{components:n,...t}=e;return(0,r.yg)(d,(0,a.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"swap-protocol"},"Swap protocol"),(0,r.yg)("h2",{id:"overview"},"Overview"),(0,r.yg)("p",null,"The ",(0,r.yg)("strong",{parentName:"p"},"swap protocol")," defines the process by which two parties conclude an atomic swap using an interactive exchange of signed messages and Elements transaction."),(0,r.yg)("p",null,"Identifying with ",(0,r.yg)("em",{parentName:"p"},"Alice")," as the ",(0,r.yg)("strong",{parentName:"p"},"Proposer")," and ",(0,r.yg)("em",{parentName:"p"},"Bob")," the ",(0,r.yg)("strong",{parentName:"p"},"Responder"),":"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Alice connects to Bob through secure transport layer and encrypted connection."),(0,r.yg)("li",{parentName:"ol"},"Alice proposes a swap crafting an unsigned transaction and a message defined as sending ",(0,r.yg)("inlineCode",{parentName:"li"},"AMOUNT_P")," of ",(0,r.yg)("inlineCode",{parentName:"li"},"ASSET_P")," and receiving ",(0,r.yg)("inlineCode",{parentName:"li"},"AMOUNT_R")," of ",(0,r.yg)("inlineCode",{parentName:"li"},"ASSET_R"),". If confidential, the blinding keys need to be included."),(0,r.yg)("li",{parentName:"ol"},"Alice sends to Bob the ",(0,r.yg)("inlineCode",{parentName:"li"},"SwapRequest")," message containing the unsigned transaction. An additional input and eventual change output needed to pay ",(0,r.yg)("em",{parentName:"li"},"half")," of the network fees is included by Alice in the transaction."),(0,r.yg)("li",{parentName:"ol"},"Bob, if accepts the terms, funds the swap and partially signs the proposed transaction and includes his blinding keys too."),(0,r.yg)("li",{parentName:"ol"},"Bob sends back to Alice the ",(0,r.yg)("inlineCode",{parentName:"li"},"SwapAccept")," message containing the partially signed transaction. An additional input and eventual change output needed to pay the remaining ",(0,r.yg)("em",{parentName:"li"},"half")," of the network fees is included by Bob in the transaction."),(0,r.yg)("li",{parentName:"ol"},"Alice parses the accepted swap and signs the transaction."),(0,r.yg)("li",{parentName:"ol"},"Alice sends to Bob the ",(0,r.yg)("inlineCode",{parentName:"li"},"SwapComplete")," message containing the signed transaction."),(0,r.yg)("li",{parentName:"ol"},"Ideally Bob finalizes and broadcast the transaction to the Liquid network.")),(0,r.yg)("h2",{id:"swap"},"Swap"),(0,r.yg)("h3",{id:"data-structures"},"Data Structures"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-protobuf"},"syntax = \"proto3\";\n\nmessage SwapRequest {\n  // Random unique identifier for the current message\n  string id = 1;\n  // The proposer's quantity\n  uint64 amount_p = 2;\n  // The proposer's asset hash\n  string asset_p = 3;\n  // The responder's quantity\n  uint64 amount_r = 4;\n  // The responder's asset hash\n  string asset_r = 5;\n  // The proposer's unsigned transaction in PSETv2 format (base64 string)\n  string transaction = 6;\n  // The list of proposer's unblinded inputs data, even in case they are\n  // unconfidential.\n  repeated UnblindedInput unblinded_inputs = 7;\n}\n\nmessage SwapAccept {\n  // Random unique identifier for the current message\n  string id = 1;\n  // Identifier of the SwapRequest message\n  string request_id = 2;\n  // The complete swap transaction in PSETv2 format (base64 string),\n  // signed by the Responder\n  string transaction = 3;\n  // The original list of trader's unblinded inputs updated with those\n  // of the inputs added by the responder, whether they're confidential or not.\n  repeated UnblindedInput unblinded_inputs = 4;\n}\n\nmessage SwapComplete {\n  // Random unique identifier for the current message\n  string id = 1;\n  // Identifier of the SwapAccept message\n  string accept_id = 2;\n  // The swap transaction in PSETv2 or raw hex format signed by the Proposer\n  string transaction = 3;\n}\n\nmessage SwapFail {\n  // Random unique identifier for the current message\n  string id = 1;\n  // Identifier of either SwapRequest or SwapAccept message. It can be empty\n  string message_id = 2;\n  // The failure code. It can be empty\n  uint32 failure_code = 3;\n  // The failure reason messaged\n  string failure_message = 4;\n}\n\nmessage UnblindedInput {\n  // Index of the transaction input of reference.\n  uint32 index = 1;\n  // Unblinded asset.\n  string asset = 2;\n  // Unblinded amount.\n  uint64 amount = 3;\n  // Asset blinder for blinded prevout, 32-byte 0x00..00 if unconfidential.\n  string asset_blinder = 4;\n  // Amount blinder for blinded prevout, 32-byte 0x00..00 if unconfidential.\n  string amount_blinder = 5;\n}\n")),(0,r.yg)("h3",{id:"swaprequest"},"SwapRequest"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"SwapRequest")," message is sent by the ",(0,r.yg)("strong",{parentName:"p"},"Proposer")," to the ",(0,r.yg)("strong",{parentName:"p"},"Responder")," to start the swap negotiation. The transaction is a PSETv2 base64 encoded string containing the Proposer's inputs and outputs (amount_r and eventual change)."),(0,r.yg)("h3",{id:"swapaccept"},"SwapAccept"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"SwapAccept")," message is sent by the ",(0,r.yg)("strong",{parentName:"p"},"Responder")," to the ",(0,r.yg)("strong",{parentName:"p"},"Proposer")," to accept the swap request."),(0,r.yg)("h3",{id:"swapcomplete"},"SwapComplete"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"SwapComplete")," message is sent by ",(0,r.yg)("strong",{parentName:"p"},"Proposer")," to the ",(0,r.yg)("strong",{parentName:"p"},"Responder")," to announce the successful completion of the swap."),(0,r.yg)("h3",{id:"swapfail"},"SwapFail"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"SwapFail")," message can be sent by either side of the swap protocol, at any time, to announce the swap termination.\n",(0,r.yg)("inlineCode",{parentName:"p"},"failure_code")," is an optional parameter for specifying the failure reason. TBD"))}u.isMDXComponent=!0},5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>m});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(t),g=r,m=d["".concat(p,".").concat(g)]||d[g]||u[g]||i;return t?a.createElement(m,o(o({ref:n},c),{},{components:t})):a.createElement(m,o({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=g;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"}}]);